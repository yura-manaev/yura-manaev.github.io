/*import React, { useEffect } from 'react';
import { Helmet } from 'react-helmet';
import { motion } from 'framer-motion';
import { itemDataLearning } from './itemData';
import TelegramComments from 'react-telegram-comments';
import ChannelPreviewLearning from '../components/ChannelPreviewLearning';
import M from '../components/Markdown';
import L from '../components/Latex';
import Img from '../components/Image';

const postNumber = itemDataLearning.find(x => x.key === 'ml_basics').id;

const title = itemDataLearning.find(x => x.id === postNumber).title + ' - avrtt.github.io';
const key = itemDataLearning.find(x => x.id === postNumber).key;
const date = itemDataLearning.find(x => x.id === postNumber).date;
var banner = require("./img/learning/" + key + ".jpg");

const prevImgStyle = {
	"width": "55%",
	"clip-path": "inset(25% 0px 30% 0px round 15px)",
	"transform": "scale(1.8)",
	"filter": "brightness(70%)"
}

const prevStyle = {
	"position": "relative",
}

const prevTextStyle = {
	"position": "absolute",
	"top": "50%",
	"left": "50%", "width": "100%",
	"transform": "translate(-50%, -70%)",
	"margin": "0",
	"padding": "0",
	"color": "#f2f2f2",
	"font-size": "55px",
	"font-family": "'Quicksand', sand-serif"
}

const prevDateStyle = {
	"position": "absolute",
	"top": "60%",
	"left": "50%", "width": "100%",
	"transform": "translate(-50%, -70%)",
	"margin": "0",
	"padding": "0",
	"color": "#f2f2f2",
	"font-size": "20px",
	"font-family": "'Quicksand', sand-serif"
}

export default function Post() {  	

	useEffect(() => {
  		window.scrollTo(0, 0)
	}, [])

	return (
		<motion.div 
			initial={{opacity: 0 }}
			animate={{opacity: 1 }}
			exit={{opacity: 0 }}
			transition={{ duration: 0.15 }}>
			<Helmet><title>{ title }</title></Helmet>
			<center><div class='noselect' style={prevStyle}>
				<img style={prevImgStyle} src={banner} alt="banner" />
				<b><div style={prevTextStyle}>{itemDataLearning.find(x => x.id === postNumber).title}</div></b>
				<div style={prevDateStyle}>{date}</div>
				<br/>
			</div></center><div class="postBody">
				
					
<M text="# This is Markdown " />
<L text="This is LaTeX: $e^+e^-$ $\\gamma$" />
<L text="\[ \lambda_(X^T X) / \lambda(X^T X) = 8.920608e+04\]" />
Modal images:
https://lh4.googleusercontent.com/gXe2uhATd6_vzw8xXKcliBolY0f4PkRJYTsvLJjMSBlTFKKDr5HcB-QhP5PX2qCM8is=w2400" w="100%" />
https://lh6.googleusercontent.com/b53GvmRR2JAICTDv0kY6P4njD9cEwWHx-XjLt6nXrQeq7S00_SvV3s8pNqampKECiiA=w2400" w="100%" />
											
[https://ml-handbook.ru/chapters/intro/intro](https://ml-handbook.ru/chapters/intro/intro)

[https://ml-handbook.ru/chapters/cross_validation/intro](https://ml-handbook.ru/chapters/cross_validation/intro)

Машинное обучение - это всё про построение моделей для понимания данных. Эти модели сами создают некие критерии для решения задачи, основываясь на данных.

[https://www.wikiwand.com/ru/Машинное_обучение](https://www.wikiwand.com/ru/%D0%9C%D0%B0%D1%88%D0%B8%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5)

"Learning" enters the fray when we give these models tunable parameters that can be adapted to observed data; in this way the program can be considered to be "learning" from the data. Once these models have been fit to previously seen data, they can be used to predict and understand aspects of newly observed data.

Что такое данные в ML, Train/Test

https://i.imgur.com/j6UHNA2.png" w="100%" />

Наша цель - подобрать такую модель, которая бы выдавала результат **ai**, максимально близкий к **yi**. Модель подбирается по обучающей выборке, что называется обучением. При этом модель в итоге должна обладать обобщающей способностью, то есть работать не только в пределать обучающей выборки, но и на множестве всех входных данных того же типа.

Самый простой способ решить эту задачу - представить функционал в виде параметрической функции, то есть свести задачу к поиску параметров:


a(x) = g(x, theta)
		
Очень желательное свойство датасета: [https://www.wikiwand.com/ru/Независимые_одинаково_распределённые_случайные_величины](https://www.wikiwand.com/ru/%D0%9D%D0%B5%D0%B7%D0%B0%D0%B2%D0%B8%D1%81%D0%B8%D0%BC%D1%8B%D0%B5_%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BA%D0%BE%D0%B2%D0%BE_%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B5_%D1%81%D0%BB%D1%83%D1%87%D0%B0%D0%B9%D0%BD%D1%8B%D0%B5_%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B8%D0%BD%D1%8B)

Очевидно, что модель хуже предсказывает новые наблюдения, если обучена на примерах, которые как-либо коррелируют друг с другом. Одинаковая распределенность подразумевает, что все данные из одного распределения. Разумеется, это идеал. В реальной жизни датасет создается из множества распределений.

Каждый объект (наблюдение) можно представить как радиус-вектор в пространстве признаков. (нарисовать пример с ростом и весом или подобный в 2D)

Зелёная таблица наблюдений без учёта таргета называется design matrix:	
	
https://i.imgur.com/nQDd4IK.png" w="100%" />		
				
У нас есть Training Data, то есть изначальные данные, затем мы строим какую-то модель, которая предсказывает, как будет вести себя Test Data.

Наиболее удобный способ хранить данные - в виде матриц. В Python лучше всего для такой интерпретации подходит массив NumPy.				
				
https://i.imgur.com/LsDLjLh.png
" w="100%" />

(каждая строка - это training example)

Пример с прогнозом погоды

Объяснить, для чего ML, как оно предсказывает значения

Гиперпараметры - это параметры, которые нужно задавать перед тем, как модель начнет работать с данными. Отличие от параметров в том, что параметры сами настраиваются в процессе тренировки модели на данных.							
							
https://i.imgur.com/zImwCwv.png" w="100%" />							

At the most fundamental level, machine learning can be categorized into two main types: supervised learning and unsupervised learning.

*Supervised learning* involves somehow modeling the relationship between measured features of data and some label associated with the data; once this model is determined, it can be used to apply labels to new, unknown data. This is further subdivided into *classification* tasks and *regression* tasks: in classification, the labels are discrete categories, while in regression, the labels are continuous quantities. We will see examples of both types of supervised learning in the following section. 'Ответы даны'

*Unsupervised learning* involves modeling the features of a dataset without reference to any label, and is often described as "letting the dataset speak for itself." These models include tasks such as *clustering* and *dimensionality reduction.* Clustering algorithms identify distinct groups of data, while dimensionality reduction algorithms search for more succinct representations of the data. We will see examples of both types of unsupervised learning in the following section. 'Ответы не даны'

In addition, there are so-called *semi-supervised learning* methods, which falls somewhere between supervised learning and unsupervised learning. Semi-supervised learning methods are often useful when only incomplete labels are available.

Reinforcement Learning

Рассказать про случай, когда датасет несбалансирован - когда один предсказываемый класс сильно преобладает над другим

Параметры модели должны быть подобраны так, чтобы уменьшить ошибки между заданным входом и выходом, но ошибка в нуле не образует экстремум. Поэтому вводится функция потерь: чем больше ошибка, тем больше её значение, и наоборот.		
	
https://i.imgur.com/iMAEnb9.png" w="100%" />
https://i.imgur.com/ylFRwll.png" w="100%" />				
				
Этапы построения модели:

- Тренировка (обучаем разные модели с разными гиперпараметрами)
- Валидация (выбираем лучшую модель, фиксируя гиперпараметры)
- Тест (проверяем победителя валидации, смотрим только метрику)

[https://ru.wikipedia.org/wiki/Статистическая_теория_обучения](https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B0%D1%82%D0%B8%D1%81%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%82%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D1%8F)

[https://ru.wikipedia.org/wiki/Теория_вычислительного_обучения](https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D1%8F)

Mathematics for ML: глава 8

[https://mml-book.github.io/book/mml-book.pdf](https://mml-book.github.io/book/mml-book.pdf)

[https://en.wikipedia.org/wiki/Empirical_risk_minimization](https://en.wikipedia.org/wiki/Empirical_risk_minimization)

Мичиганский курс по машинному обучению

[https://www.coursera.org/learn/python-machine-learning/home/welcome](https://www.coursera.org/learn/python-machine-learning/home/welcome)

Не забывать выкладывать задания в GitHub

Data Science from Scratch - глава 10, стр. 174

file:///home/lenferdetroud/Documents/Data%20Science%20from%20Scratch%20(2nd%20Edition).pdf					
		
https://i.imgur.com/HEOHzUj.png" w="100%" />			

### Выбор статистической модели

- [Перекрёстная проверка](https://machinelearningmastery.com/k-fold-cross-validation/).
- [Байесовская оптимизация](https://towardsdatascience.com/tl-dr-gaussian-process-bayesian-optimization-5e66a014b693).

Semi-supervised learning

[https://en.wikipedia.org/wiki/Automated_machine_learning](https://en.wikipedia.org/wiki/Automated_machine_learning)

[https://en.wikipedia.org/wiki/Feature_learning](https://en.wikipedia.org/wiki/Feature_learning)

Жизненный цикл ML-модели:

[https://neerc.ifmo.ru/wiki/index.php?title=Жизненный_цикл_модели_машинного_обучения](https://neerc.ifmo.ru/wiki/index.php?title=%D0%96%D0%B8%D0%B7%D0%BD%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9_%D1%86%D0%B8%D0%BA%D0%BB_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8_%D0%BC%D0%B0%D1%88%D0%B8%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D1%8F)					
				
Когда применять валидацию на отложенной выборке, когда кросс-валидацию, что надежнее?				
		
" w="100%" />			
https://i.imgur.com/qwrWL9N.png							
		
https://i.imgur.com/7N55JNw.png" w="100%" />
https://i.imgur.com/zc3jWZN.png" w="100%" />
https://i.imgur.com/Q4OGVJL.png" w="100%" />
https://i.imgur.com/V6rKcxW.png" w="100%" />
https://i.imgur.com/1n1igFz.png" w="100%" />					

У временных рядов всегда есть метка времени, поэтому нужно учитывать и не пересекать временные участки.

Поэтому, кстати, нельзя использовать train_test_split в этом случае.							
							
							
			</div><div class='chatWrapper'><TelegramComments websiteKey={'2JA7Wo3q'} customColor='000000' commentsNumber={5} pageId={key} showDislikes={true} /></div>
			<ChannelPreviewLearning />
		</motion.div>
	);
};

*/

